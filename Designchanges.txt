(Graph Class)
Description: Adjacency matrix based
    private:
	const int numVertex;	//will not need if list of templates
        ItemType    vertices[numVertex];	//names of vertices, change to list of strings rather than template array?
        int         adjMatrix[numVertex][numVertex];	//Use pointer to dynamic memory instead of array? allows graph to change size
    public:
        Graph(int numVertex, ItemType newVertices[]);
	Graph(Graph &other);	

        setVertex(int vertexIndex, ItemType newVertex, int connections[]);
        ItemType getVertexAt(int index);
	int TraversePath(Path p);	//returns weight of path after traversal



(Path Class)	
Description: Bare bones, contains int array with each element corresponding to a vertex in a graph.
    private: 
        int         array[6] = {0,0,0,0,0,0};     //{0,x,x,x,x,0} Reno = index 0
    public:
        Path(int pathIntArray)
        void    setAtIndex(int index);
        int     getDataAtIndex(int index);


(Main file/driver)
in main():
        Graph           cityPaths;
        Stack<Path>     stackOfPaths;
        Path            aShortestPath;	//will store shortest path
	int		ShortestPathCost;	//store shortest path cost, set using Graph::TraversePath()

Functions:
	Graph	ReadGraphFromFile(std::string filename);
        bool    generatePaths(Graph g, Stack<Path> s);	
        void    findShortestPath(Graph g, Stack<Path> s);
        void    displayPaths(Stack<path> s);
        bool    writePathsToFile(std::string filename);
