
"Submit a document with students working together on this project." 
 Daniel Hayden and Daniel Beeston
"Include a section on solution design. This should include:

Classes
Functions
inputs
outputs
functionality
Considering using UML for the classes and functions
How the main driver will function
Who is responsible for each class/function
A timeline of due dates for classes/functions
Also, describe your plan for communicating with your partner and how you intend to collaborate on your code. 
Specifically name the technologies you will use and how."

Communication Plan:
    design plan iteration 

    technologies used:
        gitHub
        texting

Responsibility distribution:    //using last names because first names are same

(Graph Class) [Beeston]
(Path Class)[Hayden]
(Driver)[Beeston] and/or [Hayden]
    (generatePaths)[Hayden]

Timeline:
//idk when good deadlines would be

Solution Design:

(Graph Class)
Description: Adjacency matrix based
    private:
	string* vertices;			//names of vertices
	int** 	adjacencyMatrix;
	int 	vertexCount;
	int 	minPathCost;
	Path* 	minPath;	 		 
        	
    public:
        Graph(int numVertex, string* newVertices, int** adjMatrix);
	Graph(Graph &other);	
	
	void setMatrix( int numVertices, int** adjMatrix );
        setVertexConnections(int vertexIndex, int* connections);
        int getConnectionValue(int vertexIndex, int connectionIndex);
	string getVertexName(int vertexIndex);
	int TraversePath(Path currentPath);	  //returns weight of path after traversal
	void displayMatrix();


(Path Class)	
Description: Bare bones, contains int array with each element corresponding to a vertex in a graph.
    private: 
        int* pathIndexArray;     //{0,x,x,x,x,0} Reno = index 0
    public:
        Path(int* innerCityIndexArray, int arraySize)
        void    setAtIndex(int index, int cityIndex);
        int     getDataAtIndex(int index);


(Main file/driver)
in main():
        Graph           cityPaths;
        Stack<Path>     stackOfPaths;
        Path            aShortestPath;	//will store shortest path
	int		ShortestPathCost;	//store shortest path cost, set using Graph::TraversePath()

Functions:
	Graph		ReadGraphFromFile(std::string filename); 
        stack<Path>     generatePaths(int numVertices);	
        void    	findShortestPath(Graph g, Stack<Path> s);
        void    	displayPaths(stack<Path> pathsToDisplay, int numVertices);
        bool    	writePathsToFile(std::string filename);



