
Submit a document with students working together on this project. 
 Daniel Hayden and Daniel Beeston
Include a section on solution design. This should include:

Classes
Functions
inputs
outputs
functionality
Considering using UML for the classes and functions
How the main driver will function
Who is responsible for each class/function
A timeline of due dates for classes/functions
Also, describe your plan for communicating with your partner and how you intend to collaborate on your code. 
Specifically name the technologies you will use and how.

Design:


(Graph Class)
    private:
        ItemType    vertices[numVertex];
        bool        visited[numVertex];
        bool        complete[numVertex];
        int         adjMatrix[numVertex][numVertex];
    public:
        Graph(int numVertex, ItemType newVertices[]);

        setVertex(int vertexIndex, ItemType newVertex, int connections[]);
        ItemType getVertexAt(int index);

(Path Class)
    private: 
        int         array[6] = {0,0,0,0,0,0};     //{0,x,x,x,x,0} Reno = index 0
        int         totalCost;
    public:
        Path(int pathIntArray)

        void    setAtIndex(int index);
        int     getCityIndexAt(int index);
        void    computeTotalCost();
        int     getTotalCost()

(Node Class)
    private:
        ItemType            item;
        Node<ItemType>*     next;

    public:
        Node();
        Node(const ItemType& anItem);
        Node(const ItemType& anItem, Node<ItemType>* nextNodePtr)

        ItemType            getItem()
        void                setItem(const ItemType& anItem)
        Node<ItemType>*     getNext()
        void                setNext(Node<ItemType>* nextNodePtr)

(LinkedList Class)
private:
	int nodeCount;
	Node<ItemType>* headPtr;
	Node<ItemType>* tailPtr;
	Node<ItemType>* getNodeAt(int position);

public:
	LinkedList();   //constructor
	virtual ~LinkedList();  //destructor
	
	bool                isEmpty() const;                                //checks to see if list is empty
	bool                clear();                                        //deletes all nodes
	bool                insert(int position, const ItemType& newItem);  //inserts new node at specified position
	bool                remove(int position);                           //removes node at specified position
	int                 getCount() const;                               //returns node count
	ItemType            getEntry(int postion);                          //gets node item at specified position
	void                setEntry(int postion, const ItemType& newItem); //sets node item at specified position
	vector<ItemType>    toVector() const;                               //creates vector of linked list

(Stack Class)
    private:

    public:
        Stack();

        bool        isEmpty();
        ItemType    peek();
        bool        pop();
        bool        push();
        bool        clear();

(ShortestBrute Class)
    private:
        Graph           cityPaths;
        Stack<Path>     stackOfPaths;
        Path            aShortestPath;
    
    public:
        ShortestBrute(int numVertices, ItemType vertices, int connections[]);

        bool    generatePaths();
        void    findShortestPath();
        bool    displayPaths();
        bool    writePathsToFile();
    
        